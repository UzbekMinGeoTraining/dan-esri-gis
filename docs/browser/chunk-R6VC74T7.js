import{a as g}from"./chunk-3CR7P5WT.js";import{n as m}from"./chunk-4DLSYLKE.js";import{g as p}from"./chunk-BP73DJTS.js";function y(n,e){let i=e[0]-n[0],r=e[1]-n[1];if(n.length>2&&e.length>2){let o=n[2]-e[2];return Math.sqrt(i*i+r*r+o*o)}return Math.sqrt(i*i+r*r)}function x(n,e,i){let r=n[0]+i*(e[0]-n[0]),o=n[1]+i*(e[1]-n[1]);return n.length>2&&e.length>2?[r,o,n[2]+i*(e[2]-n[2])]:[r,o]}function R(n,e,i,r){return z(n,e,i[r],i[r+1])}function z(n,e,i,r){let[o,t]=e,[s,a]=i,[l,f]=r,u=l-s,c=f-a,M=u*u+c*c,P=(o-s)*u+(t-a)*c,h=Math.min(1,Math.max(0,P/M));return n[0]=s+u*h,n[1]=a+c*h,n}function S(n,e,i,r,o,t){let s=i,a=r,l=o-s,f=t-a;if(l!==0||f!==0){let u=((n-s)*l+(e-a)*f)/(l*l+f*f);u>1?(s=o,a=t):u>0&&(s+=l*u,a+=f*u)}return l=n-s,f=e-a,l*l+f*f}function Z(n,e){return x(n,e,.5)}function D(n){let e=n.length,i=0;for(let r=0;r<e-1;++r)i+=y(n[r],n[r+1]);return i}function E(n,e){if(e<=0)return n[0];let i=n.length,r=0;for(let o=0;o<i-1;++o){let t=y(n[o],n[o+1]);if(e-r<t){let s=(e-r)/t;return x(n[o],n[o+1],s)}r+=t}return n[i-1]}function C(n,e=g.X,i=g.Y){let r=0,o=n.length,t=n[0];for(let s=1;s<o;s++){let a=n[s];r+=(a[e]-t[e])*(a[i]+t[i]),t=a}if(!d(n)){let s=n[0];r+=(s[e]-t[e])*(s[i]+t[i])}return r>=0}function d(n){let e=n.length;return e<3||p(n[0],n[e-1])}function F(n){"rings"in n&&(q(n),v(n))}function q(n){if(!("rings"in n))return!1;let e=!1;for(let i of n.rings)d(i)||(i.push(i[0].slice()),e=!0);return e}function v(n){if(!("rings"in n)||n.rings.length===0||C(n.rings[0]))return!1;for(let e of n.rings)e.reverse();return!0}function W(n){return n.type!=="polygon"&&n.type!=="polyline"||O(n.type==="polygon"?n.rings:n.paths,n.spatialReference),n}function O(n,e){let i=m(e);if(!i)return;let r=i.valid[0],o=i.valid[1],t=o-r;for(let s of n){let a=1/0,l=-1/0;for(let u of s){let c=A(u[0],r,o);a=Math.min(a,c),l=Math.max(l,c),u[0]=c}let f=l-a;t-f<f&&s.forEach(u=>{u[0]<0&&(u[0]+=t)})}}function A(n,e,i){let r=i-e;return n<e?i-(e-n)%r:n>i?e+(n-e)%r:n}function b(n,e){if(n===e)return!0;if(n.type!==e.type)return!1;if(n.type==="point"||n.type==="mesh"||n.type==="extent")return!0;if(n.type==="multipoint")return n.points.length===e.points.length;let[i,r]=n.type==="polyline"?[n.paths,e.paths]:[n.rings,e.rings];return i.length===r.length&&i.every((o,t)=>o.length===r[t].length)}export{y as a,R as b,z as c,S as d,Z as e,D as f,E as g,C as h,F as i,q as j,W as k,O as l,b as m};
