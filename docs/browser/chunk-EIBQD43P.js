import{d as z,e as G,f as I,g as j}from"./chunk-LWNDFTA5.js";import{a as b,b as k,k as v}from"./chunk-GT4Y5PVV.js";import{R as w,S as T,X as E,l as O}from"./chunk-4XQATWKL.js";import{A as D,B as F,H as R,b as s,r as N,t as J,u as g,v as P,w as B}from"./chunk-CAC75TDU.js";import"./chunk-YRE2G4RX.js";import"./chunk-F5CPBNZH.js";import"./chunk-M4PATAW3.js";import"./chunk-BQ7BWYEG.js";import"./chunk-RRDM7P6F.js";import"./chunk-LVPMJTA6.js";import"./chunk-NNETCWLJ.js";import{b as h}from"./chunk-FW33MEBA.js";import"./chunk-RM6CXOHZ.js";import"./chunk-AOA5JMXK.js";import"./chunk-TWW3KW7Z.js";import"./chunk-P2YRCTWM.js";import"./chunk-OFZ6SV37.js";import"./chunk-YSOJWUIW.js";import"./chunk-Q5WFUDPQ.js";import{a as x}from"./chunk-DPZGANVI.js";import"./chunk-T7BKG6V3.js";import"./chunk-R6VC74T7.js";import"./chunk-6WKJD7BM.js";import"./chunk-3CR7P5WT.js";import"./chunk-YRTBL7EE.js";import"./chunk-3FPO2LOS.js";import"./chunk-QNZSBADV.js";import"./chunk-PYQRTZNZ.js";import"./chunk-BIVFGNT6.js";import"./chunk-5PTS4JDF.js";import{l as y,y as n}from"./chunk-N27U3N2T.js";import"./chunk-4R5NBZMW.js";import"./chunk-NDYVXEZ5.js";import"./chunk-CMMPCPP5.js";import"./chunk-4DLSYLKE.js";import"./chunk-VPXBKZQM.js";import"./chunk-GZXWFBZI.js";import"./chunk-B7IARA3F.js";import"./chunk-IZVEJCCI.js";import"./chunk-TEY6TKJV.js";import"./chunk-4M6XQSBA.js";import"./chunk-2JF6YUJG.js";import"./chunk-GGZQ5GCM.js";import{U as S}from"./chunk-TFUPB3ZG.js";import"./chunk-ANPNMGFG.js";import{a as p}from"./chunk-BMVJCP2M.js";import"./chunk-GMC3I5VG.js";import"./chunk-WGF2T2BG.js";import"./chunk-YZP43POT.js";import"./chunk-VEDIBGHD.js";import"./chunk-3IBUFXWY.js";import"./chunk-BP73DJTS.js";import{a as c,b as f,g as a}from"./chunk-JEGVIFEP.js";var u,l=u=class extends G{constructor(){super(...arguments),this.type="identity"}clone(){return new u}};p([x({IdentityXform:"identity"})],l.prototype,"type",void 0),l=u=p([S("esri.layers.support.rasterTransforms.IdentityTransform")],l);var A=l;var H={GCSShiftXform:I,IdentityXform:A,PolynomialXform:j},et=Object.keys(H);function L(m){if(!m?.type)return null;let e=H[m?.type];if(e){let r=new e;return r.read(m),r}return null}var X=class{convertVectorFieldData(t){let e=s.fromJSON(t.pixelBlock),r=F(e,t.type);return Promise.resolve(r!=null?r.toJSON():null)}computeStatisticsHistograms(t){let e=s.fromJSON(t.pixelBlock),r=w(e);return Promise.resolve(r)}decode(t){return a(this,null,function*(){let e=yield O(t.data,t.options);return e&&e.toJSON()})}symbolize(t){t.pixelBlock=s.fromJSON(t.pixelBlock),t.extent=t.extent?n.fromJSON(t.extent):null;let e=this.symbolizer.symbolize(t);return Promise.resolve(e!=null?e.toJSON():null)}updateSymbolizer(t){return a(this,null,function*(){this.symbolizer=E.fromJSON(t.symbolizerJSON),t.histograms&&this.symbolizer?.rendererJSON.type==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=t.histograms)})}updateRasterFunction(t){return a(this,null,function*(){this.rasterFunction=z(t.rasterFunctionJSON)})}process(t){return a(this,null,function*(){let e=this.rasterFunction.process({extent:n.fromJSON(t.extent),primaryPixelBlocks:t.primaryPixelBlocks.map(r=>r!=null?s.fromJSON(r):null),primaryPixelSizes:t.primaryPixelSizes?.map(r=>r!=null?y.fromJSON(r):null),primaryRasterIds:t.primaryRasterIds});return e!=null?e.toJSON():null})}stretch(t){let e=this.symbolizer.simpleStretch(s.fromJSON(t.srcPixelBlock),t.stretchParams);return Promise.resolve(e?.toJSON())}estimateStatisticsHistograms(t){let e=T(s.fromJSON(t.srcPixelBlock));return Promise.resolve(e)}split(t){let e=J(s.fromJSON(t.srcPixelBlock),t.tileSize,t.maximumPyramidLevel??0,t.useBilinear===!1);return e&&e.forEach((r,o)=>{e.set(o,r?.toJSON())}),Promise.resolve(e)}clipTile(t){let e=s.fromJSON(t.pixelBlock),r=g(f(c({},t),{pixelBlock:e}));return Promise.resolve(r?.toJSON())}mosaicAndTransform(t){return a(this,null,function*(){let e=t.srcPixelBlocks.map(d=>d?new s(d):null),r=N(e,t.srcMosaicSize,{blockWidths:t.blockWidths,alignmentInfo:t.alignmentInfo,clipOffset:t.clipOffset,clipSize:t.clipSize}),o,i=r;return t.coefs&&(i=B(r,t.destDimension,t.coefs,t.sampleSpacing,t.interpolation)),t.projectDirections&&t.gcsGrid&&(o=P(t.destDimension,t.gcsGrid),i=D(i,t.isUV?"vector-uv":"vector-magdir",o)),{pixelBlock:i?.toJSON(),localNorthDirections:o}})}createFlowMesh(t,e){return a(this,null,function*(){let r={data:new Float32Array(t.flowData.buffer),mask:new Uint8Array(t.flowData.maskBuffer),width:t.flowData.width,height:t.flowData.height},{vertexData:o,indexData:i}=yield R(t.meshType,t.simulationSettings,r,e.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:i.buffer},transferList:[o.buffer,i.buffer]}})}getProjectionOffsetGrid(t){return a(this,null,function*(){let e=n.fromJSON(t.projectedExtent),r=n.fromJSON(t.srcBufferExtent),o=null;t.datumTransformationSteps&&(o=new h({steps:t.datumTransformationSteps})),(t.includeGCSGrid||b(e.spatialReference,r.spatialReference,o))&&(yield k());let i=t.rasterTransform?L(t.rasterTransform):null;return v(f(c({},t),{projectedExtent:e,srcBufferExtent:r,datumTransformation:o,rasterTransform:i}))})}};export{X as default};
