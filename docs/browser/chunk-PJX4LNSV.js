var c=class n{constructor(t=[],s=[]){this.lengths=t??[],this.coords=s??[]}static fromJSON(t){return new n(t.lengths,t.coords)}static fromRect(t){let[s,r,e,h]=t,o=e-s,l=h-r;return new n([5],[s,r,o,0,0,l,-o,0,0,-l])}get isPoint(){return this.lengths.length===0&&this.coords.length>=2}get maxLength(){return Math.max(...this.lengths)}get size(){return this.lengths.reduce((t,s)=>t+s)}forEachVertex(t){let s=0;this.lengths.length||t(this.coords[0],this.coords[1]);for(let r=0;r<this.lengths.length;r++){let e=this.lengths[r];for(let h=0;h<e;h++)t(this.coords[2*(h+s)],this.coords[2*(h+s)+1]);s+=e}}deltaDecode(){let t=this.clone(),{coords:s,lengths:r}=t,e=0;for(let h of r){for(let o=1;o<h;o++)s[2*(e+o)]+=s[2*(e+o)-2],s[2*(e+o)+1]+=s[2*(e+o)-1];e+=h}return t}clone(t){if(this.lengths.length===0)return new n([],[this.coords[0],this.coords[1]]);let s=(this.lengths.length===0?1:this.lengths.reduce((e,h)=>e+h))*2,r=this.coords.slice(0,s);return t?(t.set(r),new n(this.lengths,t)):new n(Array.from(this.lengths),Array.from(r))}};export{c as a};
