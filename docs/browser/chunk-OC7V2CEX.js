import{d as A,j as C}from"./chunk-VTCODMOL.js";import{k as d,l as L,m as x,n as E,o as _,p as I,v as y,z as X}from"./chunk-BDF7KEUQ.js";import{t as m}from"./chunk-3IBUFXWY.js";var P;(function(i){i[i.Texture=0]="Texture",i[i.RenderBuffer=1]="RenderBuffer"})(P||(P={}));var U=class{constructor(t=0,e=t){this.width=t,this.height=e,this.target=x.TEXTURE_2D,this.pixelFormat=E.RGBA,this.dataType=I.UNSIGNED_BYTE,this.samplingMode=d.LINEAR,this.wrapMode=L.REPEAT,this.maxAnisotropy=1,this.flipped=!1,this.hasMipmap=!1,this.isOpaque=!1,this.unpackAlignment=4,this.preMultiplyAlpha=!1,this.depth=1,this.isImmutable=!1}};function O(i){return i.width<=0||i.height<=0?0:Math.round(i.width*i.height*(i.hasMipmap?4/3:1)*(i.internalFormat==null?4:C(i.internalFormat))*(i.target===x.TEXTURE_CUBE_MAP?6:1))}var N=class i extends U{constructor(t,e){switch(super(),this.context=t,Object.assign(this,e),this.internalFormat){case _.R16F:case _.R16I:case _.R16UI:case _.R32F:case _.R32I:case _.R32UI:case _.R8_SNORM:case _.R8:case _.R8I:case _.R8UI:this.pixelFormat=E.RED}}static validate(t,e){return new i(t,e)}};var K=class M{constructor(t,e=null,s=null){if(this.type=P.Texture,this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,"context"in t)this._descriptor=t,s=e;else{let r=N.validate(t,e);if(!r)throw new m("Texture descriptor invalid");this._descriptor=r}this._descriptor.target===x.TEXTURE_CUBE_MAP?this._setDataCubeMap(s):this.setData(s)}get glName(){return this._glName}get descriptor(){return this._descriptor}get usedMemory(){return O(this._descriptor)}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty}dispose(){this._glName&&this._descriptor.context.instanceCounter.decrement(y.Texture,this),this._descriptor.context.gl&&this._glName&&(this._descriptor.context.unbindTexture(this),this._descriptor.context.gl.deleteTexture(this._glName),this._glName=null)}release(){this.dispose()}resize(t,e){let s=this._descriptor;if(s.width!==t||s.height!==e){if(this._wasImmutablyAllocated)throw new m("Immutable textures can't be resized!");s.width=t,s.height=e,this._descriptor.target===x.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}_setDataCubeMap(t=null){for(let e=x.TEXTURE_CUBE_MAP_POSITIVE_X;e<=x.TEXTURE_CUBE_MAP_NEGATIVE_Z;e++)this._setData(t,e)}setData(t){this._setData(t)}_setData(t,e){let s=this._descriptor.context?.gl;if(!s)return;A(s),this._glName||(this._glName=s.createTexture(),this._glName&&this._descriptor.context.instanceCounter.increment(y.Texture,this));let r=this._descriptor,a=e??r.target,n=w(a),p=this._descriptor.context.bindTexture(this,M.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(M.TEXTURE_UNIT_FOR_UPDATES),S(r),this._configurePixelStorage(),A(s);let o=this._deriveInternalFormat();if(G(t)){let l="width"in t?t.width:t.codedWidth,c="height"in t?t.height:t.codedHeight,h=1;t instanceof HTMLVideoElement&&(l=t.videoWidth,c=t.videoHeight),r.width&&r.height,n&&r.depth,r.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(a,o,r.hasMipmap,l,c,h),this._texImage(a,0,o,l,c,h,t),A(s),r.hasMipmap&&(this.generateMipmap(),A(s)),r.width||(r.width=l),r.height||(r.height=c),n&&!r.depth&&(r.depth=h)}else{let{width:l,height:c,depth:h}=r;if(l==null||c==null)throw new m("Width and height must be specified!");if(n&&h==null)throw new m("Depth must be specified!");if(r.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(a,o,r.hasMipmap,l,c,h),b(t)){let u=t.levels,T=W(a,l,c,h),f=Math.min(T-1,u.length-1);s.texParameteri(r.target,this._descriptor.context.gl.TEXTURE_MAX_LEVEL,f);let R=o;if(!j(R))throw new m("Attempting to use compressed data with an uncompressed format!");this._forEachMipmapLevel((g,D,F,z)=>{let H=u[Math.min(g,u.length-1)];this._compressedTexImage(a,g,R,D,F,z,H)},f)}else this._texImage(a,0,o,l,c,h,t),A(s),r.hasMipmap&&this.generateMipmap()}v(s,this._descriptor),B(s,this._descriptor),V(this._descriptor.context,this._descriptor),A(s),this._descriptor.context.bindTexture(p,M.TEXTURE_UNIT_FOR_UPDATES)}updateData(t,e,s,r,a,n,p=0){n||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");let o=this._descriptor,l=this._deriveInternalFormat(),{context:c,pixelFormat:h,dataType:u,target:T,isImmutable:f}=o;if(f&&!this._wasImmutablyAllocated)throw new m("Cannot update immutable texture before allocation!");let R=c.bindTexture(this,M.TEXTURE_UNIT_FOR_UPDATES,!0);(e<0||s<0||e+r>o.width||s+a>o.height)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();let{gl:g}=c;p&&g.pixelStorei(g.UNPACK_SKIP_ROWS,p),G(n)?g.texSubImage2D(T,t,e,s,r,a,h,u,n):b(n)?g.compressedTexSubImage2D(T,t,e,s,r,a,l,n.levels[t]):g.texSubImage2D(T,t,e,s,r,a,h,u,n),p&&g.pixelStorei(g.UNPACK_SKIP_ROWS,0),c.bindTexture(R,M.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(t,e,s,r,a,n,p,o){o||console.error("An attempt to use uninitialized data!"),this._glName||console.error("An attempt to update uninitialized texture!");let l=this._descriptor,c=this._deriveInternalFormat(),{context:h,pixelFormat:u,dataType:T,isImmutable:f,target:R}=l;if(f&&!this._wasImmutablyAllocated)throw new m("Cannot update immutable texture before allocation!");w(R)||console.warn("Attempting to set 3D texture data on a non-3D texture");let g=h.bindTexture(this,M.TEXTURE_UNIT_FOR_UPDATES);h.setActiveTexture(M.TEXTURE_UNIT_FOR_UPDATES),(e<0||s<0||r<0||e+a>l.width||s+n>l.height||r+p>l.depth)&&console.error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();let{gl:D}=h;if(b(o))o=o.levels[t],D.compressedTexSubImage3D(R,t,e,s,r,a,n,p,c,o);else{let F=o;D.texSubImage3D(R,t,e,s,r,a,n,p,u,T,F)}h.bindTexture(g,M.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){let t=this._descriptor;if(!t.hasMipmap){if(this._wasImmutablyAllocated)throw new m("Cannot add mipmaps to immutable texture after allocation");t.hasMipmap=!0,this._samplingModeDirty=!0,S(t)}t.samplingMode===d.LINEAR?(this._samplingModeDirty=!0,t.samplingMode=d.LINEAR_MIPMAP_NEAREST):t.samplingMode===d.NEAREST&&(this._samplingModeDirty=!0,t.samplingMode=d.NEAREST_MIPMAP_NEAREST);let e=this._descriptor.context.bindTexture(this,M.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(M.TEXTURE_UNIT_FOR_UPDATES),this._descriptor.context.gl.generateMipmap(t.target),this._descriptor.context.bindTexture(e,M.TEXTURE_UNIT_FOR_UPDATES)}clearMipmap(){let t=this._descriptor;if(t.hasMipmap){if(this._wasImmutablyAllocated)throw new m("Cannot delete mipmaps to immutable texture after allocation");t.hasMipmap=!1,this._samplingModeDirty=!0,S(t)}t.samplingMode===d.LINEAR_MIPMAP_NEAREST?(this._samplingModeDirty=!0,t.samplingMode=d.LINEAR):t.samplingMode===d.NEAREST_MIPMAP_NEAREST&&(this._samplingModeDirty=!0,t.samplingMode=d.NEAREST)}setSamplingMode(t){t!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=t,this._samplingModeDirty=!0)}setWrapMode(t){t!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=t,S(this._descriptor),this._wrapModeDirty=!0)}applyChanges(){let t=this._descriptor,e=t.context.gl;this._samplingModeDirty&&(v(e,t),this._samplingModeDirty=!1),this._wrapModeDirty&&(B(e,t),this._wrapModeDirty=!1)}_deriveInternalFormat(){if(this._descriptor.internalFormat!=null)return this._descriptor.internalFormat===E.DEPTH_STENCIL&&(this._descriptor.internalFormat=E.DEPTH24_STENCIL8),this._descriptor.internalFormat;switch(this._descriptor.dataType){case I.FLOAT:switch(this._descriptor.pixelFormat){case E.RGBA:return this._descriptor.internalFormat=_.RGBA32F;case E.RGB:return this._descriptor.internalFormat=_.RGB32F;default:throw new m("Unable to derive format")}case I.UNSIGNED_BYTE:switch(this._descriptor.pixelFormat){case E.RGBA:return this._descriptor.internalFormat=_.RGBA8;case E.RGB:return this._descriptor.internalFormat=_.RGB8}}return this._descriptor.internalFormat=this._descriptor.pixelFormat===E.DEPTH_STENCIL?E.DEPTH24_STENCIL8:this._descriptor.pixelFormat}_configurePixelStorage(){let t=this._descriptor.context.gl,{unpackAlignment:e,flipped:s,preMultiplyAlpha:r}=this._descriptor;t.pixelStorei(t.UNPACK_ALIGNMENT,e),t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,s?1:0),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,r?1:0)}_texStorage(t,e,s,r,a,n){let{gl:p}=this._descriptor.context;if(!Y(e))throw new m("Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;let o=s?W(t,r,a,n):1;if(w(t)){if(n==null)throw new m("Missing depth dimension for 3D texture upload");p.texStorage3D(t,o,e,r,a,n)}else p.texStorage2D(t,o,e,r,a);this._wasImmutablyAllocated=!0}_texImage(t,e,s,r,a,n,p){let o=this._descriptor.context.gl,l=w(t),{isImmutable:c,pixelFormat:h,dataType:u}=this._descriptor;if(c){if(p!=null){let T=p;if(l){if(n==null)throw new m("Missing depth dimension for 3D texture upload");o.texSubImage3D(t,e,0,0,0,r,a,n,h,u,T)}else o.texSubImage2D(t,e,0,0,r,a,h,u,T)}}else{let T=p;if(l){if(n==null)throw new m("Missing depth dimension for 3D texture upload");o.texImage3D(t,e,s,r,a,n,0,h,u,T)}else o.texImage2D(t,e,s,r,a,0,h,u,T)}}_compressedTexImage(t,e,s,r,a,n,p){let o=this._descriptor.context.gl,l=w(t);if(this._descriptor.isImmutable){if(p!=null)if(l){if(n==null)throw new m("Missing depth dimension for 3D texture upload");o.compressedTexSubImage3D(t,e,0,0,0,r,a,n,s,p)}else o.compressedTexSubImage2D(t,e,0,0,r,a,s,p)}else if(l){if(n==null)throw new m("Missing depth dimension for 3D texture upload");o.compressedTexImage3D(t,e,s,r,a,n,0,p)}else o.compressedTexImage2D(t,e,s,r,a,0,p)}_forEachMipmapLevel(t,e=1/0){let{width:s,height:r,depth:a,hasMipmap:n,target:p}=this._descriptor,o=p===x.TEXTURE_3D;if(s==null||r==null||o&&a==null)throw new m("Missing texture dimensions for mipmap calculation");for(let l=0;t(l,s,r,a),n&&(s!==1||r!==1||o&&a!==1)&&!(l>=e);++l)s=Math.max(1,s>>1),r=Math.max(1,r>>1),o&&(a=Math.max(1,a>>1))}};function S(i){(i.width!=null&&i.width<0||i.height!=null&&i.height<0||i.depth!=null&&i.depth<0)&&console.error("Negative dimension parameters are not allowed!")}function v(i,t){let e=t.samplingMode,s=t.samplingMode;e===d.LINEAR_MIPMAP_NEAREST||e===d.LINEAR_MIPMAP_LINEAR?(e=d.LINEAR,t.hasMipmap||(s=d.LINEAR)):e!==d.NEAREST_MIPMAP_NEAREST&&e!==d.NEAREST_MIPMAP_LINEAR||(e=d.NEAREST,t.hasMipmap||(s=d.NEAREST)),i.texParameteri(t.target,i.TEXTURE_MAG_FILTER,e),i.texParameteri(t.target,i.TEXTURE_MIN_FILTER,s)}function B(i,t){typeof t.wrapMode=="number"?(i.texParameteri(t.target,i.TEXTURE_WRAP_S,t.wrapMode),i.texParameteri(t.target,i.TEXTURE_WRAP_T,t.wrapMode)):(i.texParameteri(t.target,i.TEXTURE_WRAP_S,t.wrapMode.s),i.texParameteri(t.target,i.TEXTURE_WRAP_T,t.wrapMode.t))}function V(i,t){let e=i.capabilities.textureFilterAnisotropic;e&&i.gl.texParameterf(t.target,e.TEXTURE_MAX_ANISOTROPY,t.maxAnisotropy??1)}function Y(i){return i in _}function j(i){return i in X}function b(i){return i!=null&&"type"in i&&i.type==="compressed"}function k(i){return i!=null&&"byteLength"in i}function G(i){return i!=null&&!b(i)&&!k(i)}function w(i){return i===x.TEXTURE_3D||i===x.TEXTURE_2D_ARRAY}function W(i,t,e,s=1){let r=Math.max(t,e);return i===x.TEXTURE_3D&&(r=Math.max(r,s)),Math.round(Math.log(r)/Math.LN2)+1}K.TEXTURE_UNIT_FOR_UPDATES=0;export{P as a,U as b,N as c,K as d};
