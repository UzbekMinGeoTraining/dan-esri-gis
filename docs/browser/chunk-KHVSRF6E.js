import{a as f}from"./chunk-J7UK2QPE.js";import{a as l}from"./chunk-2DN2BYDF.js";import{t as u}from"./chunk-3IBUFXWY.js";import{g as n}from"./chunk-JEGVIFEP.js";var p=class{constructor(e){this.context=e,this._debug=!1,this._precompiling=this._debug?0:1,this._cache=new l,this._frameCounter=0,this._keepAliveFrameCount=m}get precompiling(){return this._precompiling}set precompiling(e){this._precompiling=e,e===0&&this.context.rctx.gl.flush()}get viewingMode(){return this.context.viewingMode}destroy(){this._debug&&this._cache.forEach((e,t)=>{e.forEach(r=>{r.refCount>0&&console.error(`Unreleased ${t} shader technique, refCount ${r.refCount}`)})}),this._cache.forAll(e=>e.technique.destroy()),this._cache.clear()}precompile(e,t=_){++this.precompiling,this.acquire(e,t).release(),--this.precompiling}acquire(e,t=_){let r=t.key.code,o=this._cache.get(e,r);if(o==null){if(this._precompiling===0){let i=`Uncached shader compile in ${new Error().stack}
  for configuration
${t.decode()}`,a=this._cache.getInner(e);throw a?.size&&(i+=`

  cached configurations:
`,i+=Array.from(a.values()).map(d=>t.decode(d.technique.key)).sort().join(`

`)),console.log(i),new u(i)}let h=new e(this.context,t,()=>this._release(h));o=new s(h),this._cache.set(e,r,o)}return++o.refCount,o.technique}_release(e){if(e==null||this._cache.empty)return;let t=this._cache.get(e.constructor,e.key.code);t!=null&&(--t.refCount,t.refCount===0&&(t.refZeroFrame=this._frameCounter))}frameUpdate(){this._frameCounter++,this._keepAliveFrameCount!==m&&this._cache.forEach((e,t)=>{e.forEach((r,o)=>{r.refCount===0&&r.refZeroFrame+this._keepAliveFrameCount<this._frameCounter&&(r.technique.destroy(),this._cache.delete(t,o))})})}reloadAll(){return n(this,null,function*(){let e=new Array;this._cache.forEach(t=>e.push(g(t))),yield Promise.all(e)})}},s=class{constructor(e){this.technique=e,this.refCount=0,this.refZeroFrame=0}},m=-1;function g(c){return n(this,null,function*(){let e=!0;c.forEach(t=>n(this,null,function*(){yield t.technique.reload(e),e=!1}))})}var _=new f;export{p as a,_ as b};
